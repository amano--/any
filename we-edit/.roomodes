{
  "customModes": [
    {
      "slug": "ts-refactor",
      "roleDefinition": "",
      "__filename": "/Users/me/dev/now/any/we-edit/.cline/roomodes/ts-refactor.md"
    },
    {
      "name": "ts:Module",
      "groups": [
        "read",
        "edit",
        "browser",
        "command",
        "mcp"
      ],
      "source": "project",
      "slug": "ts-module",
      "roleDefinition": "\n## 実装モード: モジュールモード\n\nモジュールモードはディレクトリの下で複数のファイルで構成される。\nこのプロジェクトは[T3 Stack](https://create.t3.gg/) の提唱するディレクトリ構成を基にしているので\nわからないことや、迷った場合はT3Stackのドキュメント類を参考にしてください。\n\nモジュールをテストする時は、vitestを使用してテストする\n\nテストが落ちた時は、次の手順を踏む。\n\n機能追加の場合\n\n1. 機能追加の場合、まず全体のテストが通過しているかを確認する\n2. 修正後、対象のスクリプト or モジュールをテストする\n\n修正の場合\n\n1. 落ちたモジュールのテストを確認し、実装を参照する。\n2. 落ちた理由をステップバイステップで考える(闇雲に修正しない!)\n3. 実装を修正する。必要な場合、実行時の過程を確認するためのプリントデバッグを挿入する。\n4. モジュールのテスト実行結果を確認\n\n   - 修正出来た場合、プリントデバッグを削除する\n   - 修正できない場合、3 に戻る。\n\n5. モジュール以外の全体テストを確認\n\nテストが落ちた場合、落ちたテストを修正するまで次のモジュールに進まない。\n",
      "__filename": "/Users/me/dev/now/any/we-edit/.cline/roomodes/ts-module.md"
    },
    {
      "name": "ts:TestFirstMode",
      "groups": [
        "read",
        "edit",
        "browser",
        "command",
        "mcp"
      ],
      "source": "project",
      "slug": "ts-tdd",
      "roleDefinition": "\n## 実装モード: テストファーストモード\n\nテストファーストモードは、実装の型シグネチャとテストコードを先に書き、それをユーザーに確認を取りながら実装を行う。\n\nファイル冒頭に `@tdd` を含む場合、それはテストファーストモードである。\n\n### テストの命名規約\n\nテスト名は以下の形式で記述する：\n\n```\n「{状況}の場合に{操作}をすると{結果}になること」\n```\n\n例：\n- 「有効なトークンの場合にユーザー情報を取得すると成功すること」\n- 「無効なトークンの場合にユーザー情報を取得するとエラーになること」\n\n### テストの実装順序\n\nテストコードは以下の順序で **実装** する：\n\n1. 期待する結果（アサーション）を最初に書く\n2. アサーションの妥当性をユーザーに確認\n3. 確認が取れたら、操作（Act）のコードを書く\n4. 最後に、準備（Arrange）のコードを書く\n\nこれは実行順序（Arrange → Act → Assert）とは異なる。実装を結果から始めることで、目的を明確にしてから実装を進められる。\n\n実装例：\n\n```ts\n// @script @tdd\nimport { Result, ok, err } from \"npm:neverthrow\";\n\n// 型定義\nexport interface User {\n  id: string;\n  name: string;\n}\n\nexport type ApiError = \n  | { type: \"unauthorized\"; message: string }\n  | { type: \"network\"; message: string };\n\n// インターフェース定義\ndeclare function getUser(token: string, id: string): Promise<Result<User, ApiError>>;\n\nimport { expect } from \"@std/expect\";\nimport { test } from \"@std/testing/bdd\";\n\ntest(\"有効なトークンの場合にユーザー情報を取得すると成功すること\", async () => {\n  // 1. まず期待する結果を書く\n  const expectedUser: User = {\n    id: \"1\",\n    name: \"Test User\"\n  };\n\n  // 2. ここでユーザーに結果の妥当性を確認\n\n  // 3. 次に操作を書く\n  const result = await getUser(\"valid-token\", \"1\");\n\n  // 4. 最後に準備を書く（この例では不要）\n\n  // アサーション\n  expect(result.isOk()).toBe(true);\n  result.map(user => {\n    expect(user).toEqual(expectedUser);\n  });\n});\n\ntest(\"無効なトークンの場合にユーザー情報を取得するとエラーになること\", async () => {\n  // 1. まず期待する結果を書く\n  const expectedError: ApiError = {\n    type: \"unauthorized\",\n    message: \"Invalid token\"\n  };\n\n  // 2. ユーザーに結果の妥当性を確認\n\n  // 3. 次に操作を書く\n  const result = await getUser(\"invalid-token\", \"1\");\n\n  // アサーション\n  expect(result.isErr()).toBe(true);\n  result.mapErr(error => {\n    expect(error).toEqual(expectedError);\n  });\n});\n```\n\n### 開発手順の詳細\n\n1. 型シグネチャの定義\n   ```ts\n   declare function getUser(token: string, id: string): Promise<Result<User, ApiError>>;\n   ```\n\n2. テストケースごとに：\n\n   a. 期待する結果を定義\n   ```ts\n   const expectedUser: User = {\n     id: \"1\",\n     name: \"Test User\"\n   };\n   ```\n\n   b. **ユーザーと結果の確認**\n   - この時点で期待する結果が適切か確認\n   - 仕様の見直しや追加が必要な場合は、ここで修正\n\n   c. 操作コードの実装\n   ```ts\n   const result = await getUser(\"valid-token\", \"1\");\n   ```\n\n   d. 必要な準備コードの実装\n   ```ts\n   // 必要な場合のみ\n   const mockApi = new MockApi();\n   mockApi.setup();\n   ```\n\n3. テストを一つずつ `skip` を外しながら実装\n\nテストファーストモードは他のモードと両立する。\n",
      "__filename": "/Users/me/dev/now/any/we-edit/.cline/roomodes/ts-tdd.md"
    },
    {
      "name": "ts:ScriptMode",
      "groups": [
        "read",
        "edit",
        "browser",
        "command",
        "mcp"
      ],
      "source": "project",
      "slug": "ts-script",
      "roleDefinition": "\n## 実装モード: スクリプトモード\n\n- 外部依存を可能な限り減らして、一つのファイルに完結してすべてを記述する\n- テストコードも同じファイルに記述する\n- スクリプトモードは `@script` がコード中に含まれる場合、あるいは `scripts/*` や `script/*` 以下のファイルが該当する\n\nスクリプトモードの例\n\n```ts\n/* @script */\n/**\n * 足し算を行うモジュール\n */\nfunction add(a: number, b: number): number {\n  return a + b;\n}\n\n/// test\nimport { expect, test } from \"@vitest/expect\";\n\ntest(\"add(1, 2) = 3\", () => {\n  expect(add(1, 2), \"sum 1 + 2\").toBe(3);\n});\n```\n\nCLINE/Rooのようなコーディングエージェントは、まず `node run add.ts` で実行して、要求に応じて `vitest test -A <filename>` で実行可能なようにテストを増やしていく。\n\n最初にスクリプトモードで検証し、モジュールモードに移行していく。\n",
      "__filename": "/Users/me/dev/now/any/we-edit/.cline/roomodes/ts-script.md"
    }
  ]
}