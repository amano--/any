## 1. Personal Rules

### 1.1 Rule References

1. docs/team/core/member/amano/rules/00-basic.md
   - Programming skills utilization
   - GitHub knowledge application
   - Test-driven development
   - Error detection handling

### 1.2 Understanding Criteria

1. Full understanding
   → Proceed to team rules

2. Partial understanding
   → Review missing parts before team rules

3. Limited understanding
   → Complete review before team rules

### 1.3 Key Points

1. Technical

   - Advanced programming
   - GitHub expertise
   - Algorithm implementation
   - Context validation required

2. Development

   - Test-driven focus
   - Incremental builds
   - Documented coding
   - Hypothesis-based approach

3. Quality
   - Test coverage priority
   - Error detection focus
   - Review compliance

## 2. Team Rules

### 2.1 Rule References

1. docs/team/core/rules/\*
   - Development process
   - Communication guides
   - Quality standards

### 2.2 Understanding Criteria

1. Full understanding
   → Proceed to project rules

2. Partial understanding
   → Review missing parts

3. Limited understanding
   → Complete review required

### 2.3 Key Points

1. Process

   - Git workflow
   - Review protocol
   - Doc maintenance

2. Communication

   - Task tracking
   - Progress updates
   - Issue reporting

3. Standards
   - 80%+ coverage
   - Code conventions
   - 2+ reviewers

## 3. Project Rules

### 3.1 Rule References

1. docs/setup/cline/rules/detail/basic/00-basic.md
2. docs/setup/cline/rules/detail/basic/01-trigger-task.md
3. docs/setup/cline/rules/detail/basic/02-git-workflow.md
4. docs/setup/cline/rules/detail/basic/03-clinerules-best-practices.md
5. docs/setup/cline/rules/detail/trigger-task/adr-creation.md
6. docs/setup/cline/rules/detail/trigger-task/auto-commit-by-task.md
7. docs/setup/cline/rules/detail/trigger-task/guideline-revision.md
8. docs/setup/cline/rules/detail/trigger-task/knowledge-update.md
9. docs/setup/cline/rules/detail/trigger-task/rule-improvement.md
10. docs/setup/cline/rules/detail/trigger-task/weekly-report-update.md

### 3.2 Understanding Criteria

1. Full understanding

   - Rules and procedures clear
   - Implementation ready
     → Start work

2. Partial understanding

   - Identify gaps
   - Additional study
     → Review then start

3. Limited understanding
   - Complete review
   - Key points check
     → Full review required

### 3.3 Key Points

1. Basic Rules

   - Structure comprehension
   - Workflow understanding
   - Best practices

2. Triggers
   - Auto detection
   - Task conditions
   - Error handling

### 3.4 Review Process

#### Steps

1. Gap identification
2. Documentation review
3. Understanding check

#### Prevention

- Personal rule alignment
- Team rule alignment
- Project exceptions noted

# ファイル修正手順書

## 0. 重要な前提

- 修正は最小限に留める
- 元の構造は可能な限り維持する
- 変更は必ず差分で提示する
- 承認を得てから実装する

## 1. 準備フェーズ

### 1.1 修正依頼の分析

1. 変更点の特定

   ```yaml
   修正項目:
     必須の変更:
       - 具体的な変更内容A
       - 具体的な変更内容B
     オプションの変更:
       - 必要に応じて実施する変更A
       - 必要に応じて実施する変更B
   ```

2. 制約の確認
   - 変更可能な範囲
   - 維持すべき要素
   - 禁止事項

### 1.2 差分提案の作成

1. ファイル命名規則

   ```
   docs/team/[teamName]/member/[userName]/logs/YYYY-MM-DD/YYYY-MM-DD-HH-[target]-diff-proposal.md
   ```

2. 差分の記述形式

   ```diff
   # 変更箇所A
   - 削除される行
   + 追加される行

   # 変更箇所B
   - 古い内容
   + 新しい内容
   ```

3. 提案書の構造

   ```markdown
   # [対象ファイル名] 修正提案

   ## 1. 変更内容

   [具体的な差分]

   ## 2. 変更理由

   [なぜこの変更が必要か]

   ## 3. 影響範囲

   [この変更が影響を与える範囲]
   ```

## 2. レビューフェーズ

### 2.1 事前チェック

```yaml
確認項目:
  構造:
    - [ ] セクション番号の一貫性
    - [ ] インデントの正確性
    - [ ] 参照の有効性

  内容:
    - [ ] 変更内容の明確さ
    - [ ] 理由の妥当性
    - [ ] 影響範囲の正確性

  形式:
    - [ ] diff形式の正確性
    - [ ] ファイル名の規則性
    - [ ] 文書構造の一貫性
```

### 2.2 フィードバック対応

1. フィードバックの記録

   ```markdown
   ## フィードバック内容

   1. [指摘内容A]

      - 対応: [具体的な修正内容]
      - 確認: [確認方法]

   2. [指摘内容B]
      - 対応: [具体的な修正内容]
      - 確認: [確認方法]
   ```

2. 再提案のバージョン管理
   ```
   元ファイル名-v2.md
   元ファイル名-v3.md
   ```

## 3. 実装フェーズ

### 3.1 変更の適用

1. バックアップの作成

   ```bash
   cp target.md target-YYYY-MM-DD-HH-backup.md
   ```

2. 段階的な適用

   ```yaml
   手順:
     1. 変更A:
       - 適用
       - 検証
       - 確認

     2. 変更B:
       - 適用
       - 検証
       - 確認
   ```

### 3.2 検証プロセス

1. 構文チェック

   ```yaml
   確認項目:
     - マークダウン形式
     - YAMLブロック
     - コードブロック
   ```

2. 参照チェック

   ```yaml
   確認項目:
     - ファイルパス
     - セクション参照
     - リンク
   ```

3. 整合性チェック
   ```yaml
   確認項目:
     - セクション番号
     - インデント
     - フォーマット
   ```

## 4. 完了フェーズ

### 4.1 最終確認

1. 完了チェックリスト

   ```yaml
   確認項目:
     修正内容:
       - [ ] すべての変更が適用済み
       - [ ] バックアップが存在する
       - [ ] 差分が正確

     検証:
       - [ ] 構文エラーなし
       - [ ] 参照エラーなし
       - [ ] 形式一貫性あり

     承認:
       - [ ] レビュー完了
       - [ ] フィードバック対応完了
       - [ ] 最終承認取得
   ```

### 4.2 記録

1. 作業ログ

   ```yaml
   記録項目:
     - 実施日時
     - 変更内容
     - 確認結果
     - 承認者
   ```

2. 問題と解決策
   ```yaml
   記録項目:
     - 発生した問題
     - 対応方法
     - 予防策
   ```

## 5. 改善提案

### 5.1 プロセス改善

1. 効率化ポイント

   - 作業手順の最適化
   - ツールの活用
   - テンプレートの改善

2. エラー防止策
   - チェックリストの拡充
   - 自動化の検討
   - レビュー強化

### 5.2 文書化

1. 手順書の更新

   - 新しい知見の追加
   - 具体例の充実
   - 注意点の明確化

2. ナレッジの共有
   - ベストプラクティス
   - 失敗事例
   - 改善提案
